import React, { useState } from "react";
import Cards from "react-credit-cards-2";
import "react-credit-cards-2/dist/es/styles-compiled.css";

import { loadStripe } from "@stripe/stripe-js";
const CreditCardForm = () => {
  const [state, setState] = useState({
    number: "",
    name: "",
    expiry: "",
    cvc: "",
    name: "",
    focus: "",
  });
  const [token, setToken] = useState(null);
  const stripePromise = loadStripe('pk_test_51OZ8bOA8ttpkva0VcMDiMRgZ19UbgNtFydyW40M7llfTnSJwjgH53MPn19E1CaQdtW8ivMkd9P1VXNidX3SjM822008nTPk8I6'); 
  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const stripe = await stripePromise;

      // Attempt token generation with provided card data (less secure)
      const { error, paymentMethod } = await stripe.createPaymentMethod({
        type: 'card',
        card: {
          number: state.number,
          exp_month: state.expiry.split('/')[0],
          exp_year: state.expiry.split('/')[1],
          cvc: state.cvc,
        },
      });

      if (error) {
        console.error('[error]', error);
        // Handle errors appropriately (display user-friendly messages)
      } else {
        setToken(paymentMethod.id); // Store the generated token

        // Send masked card data and token to server
        fetch('/your-server-endpoint', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            token,
            cardData: {
              maskedNumber: state.number.replace(/.(?=.{4})/g, '*'), // Mask card number
              expiry: state.expiry,
              name: state.name,
            },
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log('Success:', data);
          })
          .catch((error) => {
            console.error('Error:', error);
          });
      }
    } catch (error) {
      console.error('Stripe error:', error);
      // Handle other Stripe-related errors
    }
  };
  const handleInputChange = (e) => {
    let { name, value } = e.target;

    if (name === "number") {
      // value = value.replace(/\W/gi, "").replace(/(.{4})/g, "$1 ").trim();
      if (value.replace(/\s/g, "").length > 16) {
        return;
      }
    }

    if (name === "expiry") {
      value = value.replace(/\W/gi, "").replace(/(.{2})/, "$1/").trim();
      if (value.length > 5) {
        return;
      }
    }

    if (name === "cvc") {
      value = value.slice(0, 3);
    }

    setState((prev) => ({ ...prev, [name]: value }));
  };

  const handleInputFocus = (e) => {
    setState((prev) => ({ ...prev, focus: e.target.name }));
  };

  return (
    <>
      <div className="main-container">
        <div className="child-container">
          <div>
            <Cards
              number={state.number}
              expiry={state.expiry}
              cvc={state.cvc}
              name={state.name}
              focused={state.focus}
            />
            <div className="mt-3">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <input
                    type="tel"
                    name="number"
                    className="form-control"
                    placeholder="Card Number"
                    value={state.number}
                    onChange={handleInputChange}
                    onFocus={handleInputFocus}
                    required
                  />
                </div>
                <div className="mb-3">
                  <input
                    type="text"
                    name="name"
                    className="form-control"
                    placeholder="Name"
                    onChange={handleInputChange}
                    onFocus={handleInputFocus}
                    required
                  />
                </div>
                <div className="row">
                  <div className="col-6 mb-3">
                    <input
                      type="text"
                      name="expiry"
                      className="form-control"
                      placeholder="Valid Thru"
                      value={state.expiry}
                      onChange={handleInputChange}
                      onFocus={handleInputFocus}
                      required
                    />
                  </div>
                  <div className="col-6 mb-3">
                    <input
                      type="text"
                      name="cvc"
                      className="form-control"
                      placeholder="CVC"
                      value={state.cvc}
                      onChange={handleInputChange}
                      onFocus={handleInputFocus}
                      required
                    />
                  </div>
                </div>
                <div className="d-grid">
                  <button type="submit" className="btn btn-dark"><strong>Confirm</strong></button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default CreditCardForm;
